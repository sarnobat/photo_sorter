import java.io.File;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLDecoder;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;

import org.apache.commons.configuration.ConfigurationException;
import org.apache.commons.configuration.PropertiesConfiguration;
import org.apache.commons.io.FileUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.pivot.wtk.Application;
import org.apache.pivot.wtk.ApplicationContext;
import org.apache.pivot.wtk.BoxPane;
import org.apache.pivot.wtk.ComponentKeyListener;
import org.apache.pivot.wtk.DesktopApplicationContext;
import org.apache.pivot.wtk.Display;
import org.apache.pivot.wtk.FlowPane;
import org.apache.pivot.wtk.ImageView;
import org.apache.pivot.wtk.Keyboard;
import org.apache.pivot.wtk.Orientation;
import org.apache.pivot.wtk.TextArea;
import org.apache.pivot.wtk.TextInput;
import org.apache.pivot.wtk.Window;

import com.google.common.base.Preconditions;

/**
 * @author ssarnobat@google.com (Sridhar Sarnobat)
 */
public class PhotoSorter implements Application {
	// private static String aRootDirPath = "E:/Sridhar/Web/Friends/Poorvi";
	private static final String aRootDirPath = "E:/Drive J/pictures/Other (new)/pictures/misc/teen";
	// String aRootDirPath =
	// "E:/Drive J/pictures/Other (new)/pictures/misc/ind";
	private static final String configFilePath = "C:/Documents and Settings/Sridhar.SRIDHAR-E5FA83A/Desktop/Macbook Pro/Professional/apache-pivot/helloworld/resources/teen.txt";
	// "/home/ssarnobat/my/usb/Professional/apache-pivot/helloworld/resources/btt.txt";
	protected static final boolean RECURSIVE = false;
	protected static final boolean SHOW_TAGGED = false;
	protected static Set<String> tagsToIgnore = new HashSet<String>();
	public static final String FAVORITES_FOLDER = "E:/Drive J/pictures/Other (new)/pictures/favorites";
	private static MyConfiguration configuration = new MyConfiguration(
			RECURSIVE, SHOW_TAGGED, tagsToIgnore, FAVORITES_FOLDER, configFilePath, aRootDirPath, new HashSet<String>());
	@Override
	public void startup(Display iDisplay,
			org.apache.pivot.collections.Map<String, String> iProperties) {
		// Model
		loadConfiguration();
		createFilePathTextInput(new MyKeyListener(this));

		// TODO:set focus of text input, or put the key listener on something
		// else

		BoxPane verticalFlowPaneComponent = new BoxPane();
		verticalFlowPaneComponent.add(imagePathComponent);
		verticalFlowPaneComponent.setOrientation(Orientation.VERTICAL);
		verticalFlowPaneComponent.add(aFilePathTextInput);
		verticalFlowPaneComponent.add(anImageView);
		flowPaneComponent = new FlowPane();
		flowPaneComponent.add(verticalFlowPaneComponent);

		{
			TextArea recursiveCheckbox = new MyConfigTextArea(this);
			flowPaneComponent.add(recursiveCheckbox);
		}
		{
			MyTextArea configTextAreaComponent = new MyTextArea(this);
			flowPaneComponent.add(configTextAreaComponent);
			bindingsPane = createBindingsWidgets();
			flowPaneComponent.add(bindingsPane);
			String configText = getConfigTextFromFile(configFilePath);
			configTextAreaComponent.setText(configText);
			createKeyBindingsFromText(configText, this);
		}
		refreshImageList(configuration.getRootDirPath(), configuration.recursive());
		try {
			showNext();
		} catch (NoImagesFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		anImageView.setEnabled(true);

		window = new Window();
		window.setContent(flowPaneComponent);
		window.setTitle("Image Sorter");
		window.setMaximized(true);
		window.open(iDisplay);
	}

	/**
	 * @param configText2
	 * @return
	 * @throws IllegalAccessError
	 */
	private String getConfigTextFromFile(String configText2)
			throws IllegalAccessError {
		String configText = null;
		try {
			File configFile = new File(configText2);
			if (configFile.exists()) {
				configText = FileUtils.readFileToString(configFile);
			} else {
				throw new IllegalAccessError("File does not exist");
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		return configText;
	}

	private Window window = null;
	TextInput aFilePathTextInput;
	ImageView anImageView = new MyImageView();
	FlowPane flowPaneComponent;
	File currentImage;
	MyImageList imageList;
	private BoxPane bindingsPane;

	private final PhotoSorter getInstance() {
		return this;
	}

	// TODO: add numerical key shortcuts to the most popular ones (dynamically).
	// Display the counts
	// for each tag
	private java.util.Map<MyKeyInput, MyImageAction> imageActions = new HashMap<MyKeyInput, MyImageAction>() {
		{
			put(new MyKeyInput(Keyboard.KeyCode.SPACE), new MyImageAction(
					getInstance(), null) {
				@Override
				public File invoke(File imageFile)
						throws NoImagesFoundException {
					return app.showNext();
				}
			});
		}
	};

	private PropertiesConfiguration config;

	public static void main(String[] args) {
		DesktopApplicationContext.main(PhotoSorter.class, args);
	}

	private void refreshImageList(String rootDirPath, boolean recursive) {
		File rootDir = new File(rootDirPath);
		if (rootDir.exists()) {
			refreshImageList(rootDir, recursive);
		}
	}
	
	private void refreshImageList(File rootDir, boolean recursive) {
		Set<String> tags = new HashSet<String>();
		for (MyImageAction actions : this.imageActions.values()) {
			tags.add(actions.getFolderName());
		}
		imageList = new MyImageList(rootDir, configuration.recursive(), SHOW_TAGGED, tags,
				tagsToIgnore, configuration);
	}

	private void createFilePathTextInput(
			ComponentKeyListener.Adapter keyListener) {
		aFilePathTextInput = new TextInput();
		aFilePathTextInput.setPreferredSize(800, 20);
		aFilePathTextInput.getComponentKeyListeners().add(keyListener);
	}

	Map<MyTextInput, MyTextInput> keyConfigInputPair;
	private MyTextInput imagePathComponent = new MyTextInput(configuration.getRootDirPath()) {
		@Override
		public void valueChanged() {
			refreshImageList(getText(), configuration.recursive());
		}
	};;

	private BoxPane createBindingsWidgets() {
		keyConfigInputPair = new HashMap<MyTextInput, MyTextInput>();
		BoxPane bindingsPane = new BoxPane();
		bindingsPane.setOrientation(Orientation.VERTICAL);
		for (MyKeyInput aKeyTextInputWidget : imageActions.keySet()) {
			try {
				MyKeyInput anInput = aKeyTextInputWidget;
				if (anInput == null) {
					// user doesn't have any more bindings
					break;
				}
				char keyCode = (char) anInput.keyCode();
				MyImageAction myImageAction = imageActions.get(anInput);
				String folderName = myImageAction.getFolderName();
				MyTextInput keyTextInputWidget = new MyTextInput(
						Character.toString(keyCode)) {
					@Override
					public void valueChanged() {
					}
				};
				keyTextInputWidget.setText(Character.toString(keyCode));
				MyTextInput tagTextInputWidget = new MyTextInput(folderName,
						myImageAction) {
					@Override
					public void valueChanged() {
						try {
							action.invoke(currentImage);
						} catch (NoImagesFoundException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
				};
				if (folderName != null) {
					tagTextInputWidget.setText(folderName);
				}
				keyConfigInputPair.put(keyTextInputWidget, tagTextInputWidget);
				FlowPane bindingEntry = new FlowPane();
				bindingEntry.add(keyTextInputWidget);
				bindingEntry.add(tagTextInputWidget);
				bindingsPane.add(bindingEntry);
			} catch (NoSuchElementException e) {
				break;
			}
		}
		return bindingsPane;
	}

	private void loadConfiguration() {
		File configFile = new File("usergui.properties");
		try {
			config = new PropertiesConfiguration(configFile);
			config.setProperty("colors.background", "#000001");
			config.save();
		} catch (ConfigurationException e) {
			e.printStackTrace();
		}
	}

	@Override
	public boolean shutdown(boolean optional) {
		if (window != null) {
			window.close();
		}
		return false;
	}

	@Override
	public void suspend() {
	}

	@Override
	public void resume() {
	}

	public File showNext() throws NoImagesFoundException {
		if (currentImage != null) {
			if (currentImage.toURI() != null) {
				try {
					ApplicationContext.getResourceCache().remove(
							currentImage.toURI().toURL());
				} catch (MalformedURLException e) {
					e.printStackTrace();
				}
			}
		}
		currentImage = imageList.advancePointer();

		File ret = null;
		while (currentImage == null || !currentImage.exists()) {
			currentImage = imageList.advancePointer();
		}
		try {
			ret = displayImage(currentImage, anImageView, aFilePathTextInput);
		} catch (IllegalArgumentException e) {
			// currentImage = null;
			return showNext();
		}

		return ret;
	}

	public File showPrevious() {
		currentImage = imageList.retreatPointer();
		return displayImage(currentImage, anImageView, aFilePathTextInput);
	}

	private static File displayImage(File f, ImageView anImageView,
			TextInput aTextInput) {
		try {
			anImageView.clear();
			URL url = f.toURI().toURL();
			anImageView.setImage(url);
			// anImageView.setPreferredHeight(500);
			String decoded = URLDecoder.decode(url.toURI().toASCIIString(),
					"UTF-8");
			aTextInput.setText(decoded);
			aTextInput.setSelection(0, 1);
		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (URISyntaxException e) {
			e.printStackTrace();
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		return f;
	}

	public void invokeTagAction(int keyCode) {
		Preconditions.checkNotNull(currentImage);
		MyImageAction anAction = null;
		for (MyTextInput aKeyInputWidget : this.keyConfigInputPair.keySet()) {
			char[] charsInTextBox = aKeyInputWidget.getText().toCharArray();
			if (charsInTextBox.length > 1) {
				continue;
			}
			if (charsInTextBox[0] == keyCode) {
				anAction = this.imageActions.get(new MyKeyInput(keyCode));
				if (anAction == null) {
					return;
				}
				break;
			}
		}
		if (anAction == null) {
			return;
		}
		File newFile;
		try {
			newFile = anAction.invoke(currentImage);
			// if (RECURSIVE) {
			imageList.replaceImage(newFile, currentImage);
			// } else {
			// imageList.remove(currentImage);
			// }
			showNext();
		} catch (NoImagesFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		// showPrevious();
	}

	public void addImageActionForKey(int keyCode, String folderName) {
		this.imageActions.put(new MyKeyInput(keyCode), new MyImageTagAction(
				getInstance(), folderName));
	}

	public void clearKeyBindings() {
		flowPaneComponent.remove(bindingsPane);
		this.imageActions.clear();
	}

	public void buildKeyListenersFromMap() {
		bindingsPane = createBindingsWidgets();
		flowPaneComponent.add(bindingsPane);
	}

	public static void createKeyBindingsFromText(String bindingsText,
			PhotoSorter photoSorter) {
		String[] bindings = bindingsText.split("\\n");
		photoSorter.clearKeyBindings();
		for (String bindingLine : bindings) {
			// Ignore comments
			if (bindingLine.trim().startsWith("#")) {
				continue;
			}
			String[] pair = bindingLine.split("=");
			if (pair.length != 2) {
				continue;
			}
			String leftSide = pair[0];
			String folderName = pair[1];
			if (leftSide.length() != 1) {
				continue;
			}
			if (folderName.length() < 1) {
				continue;
			}
			char keyCode = leftSide.charAt(0);
			photoSorter.addImageActionForKey(keyCode, folderName);
		}
		photoSorter.buildKeyListenersFromMap();
	}

	public File getCurrentImage() {
		return currentImage;
	}

	public void parseOptions(String configText) {
		String[] configLines = configText.split("\\n");
		setDefaultOptions();
		boolean recursive = RECURSIVE;
		boolean showTagged = SHOW_TAGGED;
		Set<String> permittedExtensions = new HashSet<String>();
		for (String configLine : configLines) {
			// Ignore comments
			String configLineTrimmed = configLine.trim();
			if (configLineTrimmed.startsWith("#")) {
				continue;
			}
			if (configLineTrimmed.matches("recursive")) {
				recursive = true;
			}
			if (configLineTrimmed.matches("show_all_tagged")) {
				showTagged= true;
			}
			if (configLineTrimmed.startsWith("EXCLUDE")) {
				String lineRemainder = StringUtils.remove(configLineTrimmed,
						"EXCLUDE");
				String tagToIgnore = lineRemainder.trim();
				tagsToIgnore.add(tagToIgnore);
			}
			if (configLineTrimmed.startsWith("EXT")) {
				String lineRemainder = StringUtils.remove(configLineTrimmed,
						"EXT");
				String tagToIgnore = lineRemainder.trim();
				permittedExtensions.add(tagToIgnore.toLowerCase());
			}

		}
		configuration = new MyConfiguration(recursive, showTagged,
				tagsToIgnore, FAVORITES_FOLDER, configFilePath, configuration.getRootDirPath(), permittedExtensions);
		refreshImageList(configuration.getRootDirPath(), RECURSIVE);
	}

	private static void setDefaultOptions() {
//		RECURSIVE = false;
//		SHOW_TAGGED = false;
		tagsToIgnore.clear();
	}
}
